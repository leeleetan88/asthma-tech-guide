import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
from scipy.spatial import cKDTree
import numpy as np
import time  # Import time module for measuring elapsed time

# Function to convert distances from degrees to kilometers
def degrees_to_km(distance, latitude):
    km_per_degree_lat = 111.1  # 1 degree of latitude is approximately 111 km
    km_per_degree_lon = 111.1 * np.cos(np.radians(latitude))  # Adjust for the cosine of latitude
    return distance * km_per_degree_lat  # For latitude

# Step 1: Define the CSV file path and chunk size
csv_file = 'Data_collected/SG_postal.csv'  # Replace with your CSV file path
chunk_size = 10000  # Number of rows to process at a time

# Step 2: Load the GeoJSON file
geojson_file = 'Data_collected/MasterPlan2019SDCPWaterbodylayerGEOJSON.geojson'  # Replace with your GeoJSON file path
waterbody_gdf = gpd.read_file(geojson_file)

# Extract coordinates from waterbody geometries for nearest neighbor analysis
waterbody_coords = waterbody_gdf.geometry.apply(lambda x: x.representative_point()).astype(object)
waterbody_points = [(point.x, point.y) for point in waterbody_coords]

# Create KDTree for efficient nearest neighbor search
tree = cKDTree(waterbody_points)

# Step 3: Process the CSV file in chunks
output_file = 'Dist_to_nearest_bluespace/postal_with_nearest_waterbody_all_km.csv'
first_chunk = True  # To indicate whether to write the header or not

for chunk_index, chunk in enumerate(pd.read_csv(csv_file, chunksize=chunk_size)):
    start_time = time.time()  # Start timer for the batch

    # Step 4: Convert chunk to GeoDataFrame
    geometry = [Point(lon, lat) for lon, lat in zip(chunk['lon'], chunk['lat'])]
    postal_gdf = gpd.GeoDataFrame(chunk, geometry=geometry, crs="EPSG:4326")

    # Step 5: Perform Nearest Neighbor Analysis
    postal_coords = postal_gdf['geometry'].astype(object).apply(lambda geom: (geom.x, geom.y)).tolist()
    distances, indices = tree.query(postal_coords)

    # Step 6: Add nearest neighbor information to the postal DataFrame
    postal_gdf['nearest_waterbody_index'] = indices
    postal_gdf['distance_to_nearest_waterbody_degrees'] = distances
    postal_gdf['distance_to_nearest_waterbody_km'] = [
        degrees_to_km(distance, postal_gdf.geometry.y.iloc[i]) for i, distance in enumerate(distances)
    ]

    # Optionally, get the waterbody geometries for the nearest waterbody
    # postal_gdf['nearest_waterbody'] = [waterbody_gdf.geometry.iloc[idx] for idx in indices]

    # Step 7: Save the processed chunk to the output file
    postal_gdf.to_csv(output_file, mode='a', header=first_chunk, index=False)
    first_chunk = False  # After the first chunk, don't write the header again

    # Step 8: Print time elapsed for the batch
    elapsed_time = time.time() - start_time
    print(f"Batch {chunk_index + 1} completed in {elapsed_time:.2f} seconds")

print("Processing complete. Results saved to", output_file)
