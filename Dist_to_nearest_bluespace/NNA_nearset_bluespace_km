## Not done yet as used a sample of 1000 postal code only as its takes too long to run
## Need to figure out how to do it in batches

import pandas as pd
import geopandas as gpd
from shapely.geometry import Point
from scipy.spatial import cKDTree
import numpy as np

# Function to convert distances from degrees to kilometers
def degrees_to_km(distance, latitude):
    km_per_degree_lat = 111  # 1 degree of latitude is approximately 111 km
    km_per_degree_lon = 111 * np.cos(np.radians(latitude))  # Adjust for the cosine of latitude
    return distance * km_per_degree_lat  # For latitude

# Step 1: Load the CSV with postal codes and coordinates
csv_file = 'Data_collected/SG_postal.csv'  # Replace with your CSV file path
postal_data = pd.read_csv(csv_file)

# Step 2: Randomly select 1000 postal codes
postal_data_sample = postal_data.sample(n=1000, random_state=1)  # Set random_state for reproducibility

# Step 3: Convert to GeoDataFrame
geometry = [Point(lon, lat) for lon, lat in zip(postal_data_sample['lon'], postal_data_sample['lat'])]
postal_gdf = gpd.GeoDataFrame(postal_data_sample, geometry=geometry, crs="EPSG:4326")

# Step 4: Load the GeoJSON file
geojson_file = 'Data_collected/MasterPlan2019SDCPWaterbodylayerGEOJSON.geojson'  # Replace with your GeoJSON file path
waterbody_gdf = gpd.read_file(geojson_file)

# Step 5: Perform Nearest Neighbor Analysis
# Extract coordinates from postal points
postal_coords = postal_gdf['geometry'].astype(object).apply(lambda geom: (geom.x, geom.y)).tolist()
waterbody_coords = waterbody_gdf.geometry.apply(lambda x: x.representative_point()).astype(object)
waterbody_points = [(point.x, point.y) for point in waterbody_coords]

# Create KDTree for efficient nearest neighbor search
tree = cKDTree(waterbody_points)

# Find the nearest waterbody for each postal point
distances, indices = tree.query(postal_coords)

# Step 6: Add nearest neighbor information to the postal DataFrame
postal_gdf['nearest_waterbody_index'] = indices
postal_gdf['distance_to_nearest_waterbody_degrees'] = distances

# Convert distances from degrees to kilometers
postal_gdf['distance_to_nearest_waterbody_km'] = [
    degrees_to_km(distance, postal_gdf.geometry.y.iloc[i]) for i, distance in enumerate(distances)
]

# Optionally, get the waterbody geometries for the nearest waterbody
postal_gdf['nearest_waterbody'] = [waterbody_gdf.geometry.iloc[idx] for idx in indices]

# Step 7: Save results to a new CSV
postal_gdf.to_csv('postal_with_nearest_waterbody_sampled_km.csv', index=False)